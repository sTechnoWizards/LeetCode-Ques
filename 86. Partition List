Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]

Constraints:
The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

-----------------------------------------------------------------CODE---------------------------------------------------------------------------------
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode *fh = NULL;
        ListNode *ft = NULL;
        ListNode *th = NULL;
        ListNode *tt = NULL;
        ListNode *temp = head;
        while(temp != NULL){
            if(temp->val < x){
                if(fh == NULL){
                    fh = temp;
                    ft = temp;
                }
                else{
                    ft->next = temp;
                    ft = ft->next;
                }
            }
            else{
                if(th == NULL){
                    th = temp;
                    tt = temp;
                }
                else{
                    tt->next = temp;
                    tt = tt->next;
                }
            }
            temp = temp->next;
        }
        if(fh == NULL){
            fh = th;
            tt->next = NULL;
        }
        else if(th == NULL){
            ft->next = NULL;
        }
        else{
            ft->next = th;
            tt->next = NULL;
        }
        return fh;
    }
};
