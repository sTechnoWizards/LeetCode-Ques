A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.

Example 1:
Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.


Example 2:
Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.
 

Constraints:

2 <= arr.length <= 1000
-10^6 <= arr[i] <= 10^6

---------------------------------------------Approach------------------------------------------
# Sort the given array in ascending order.
# Calculate the common difference by subtracting the second element from the first element.
# Iterate through the remaining elements of the sorted array and check if the difference between the current element and the previous element is equal to the common difference. If not, return false.
# If we finish iterating through all the elements without finding any inconsistencies, return true.

--------------------------------------------Code------------------------------------------------
class Solution {
public:
    bool canMakeArithmeticProgression(vector<int>& arr) {
        if(arr.size() <= 2) return true;
        sort(arr.begin(), arr.end());
        int dx = arr[1] - arr[0];
        for(int i = 2; i < arr.size(); i++)
            if(arr[i] - arr[i-1] != dx)
                return false;

        return true;
    }
};

------------------------------------------Complexities----------------------------------
TC: O(NlogN)
SC: O(1)
