Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.


------------------------------------------------------Code---------------------------------------
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        
    	for(int t=0; t<9; t++){
    		vector<char> vv = board[t];
    	    std::sort(vv.begin(), vv.end());
    	    for(int a=0; a<8; a++){
    	        if(vv[a] == vv[a+1] && vv[a] != '.'){
    	        	return false;
    	        }
    	    }
    	}
//      2-3x3 Squares-------------

    	for(int i=0; i<9; i+=3) { 
	        for(int j=0; j<9; j+=3) {
	            vector<char> control;
	            for(int k=0; k<3; k++) {
	                for(int l=0; l<3; l++) {
	                    control.push_back(board[i+k][j+l]);
	                }
	            }
	            sort(control.begin(), control.end()); 
	            for(int k=1; k<control.size(); k++) {
	                if(control[k] == control[k-1] && control[k] != '.') {
	                    return false; 
	                }
	            }
	        }
    	}
    	

//      3-Columns------------------

    	for(int j=0; j<9; j++) { 
	        vector<char> control2;
	        for(int i=0; i<9; i++) {
	            control2.push_back(board[i][j]);
	        }
	        sort(control2.begin(), control2.end()); 
	        for(int k=1; k<control2.size(); k++) {
	            if(control2[k] == control2[k-1] && control2[k] != '.') {
	                return false; 
	            }
	        }
    	}
    	
    	return true;
    }
};



-----------------------------------------------Approach----------------------------------------------
1- We will sort each row in order and check if it is a consecutive number.

2-We will check with for loops for every3x3 block. While the first 2 for loops will travel through the squares in order, the next 2 for loops will travel inside the squares and each number inside the squares will be assigned to the vector we call control. Then, the elements in the vector will be sorted and it will be checked whether they are consecutive numbers.

3- A for loop will return every column. The other for loop will through the columns and assign the elements inside each column to the control2 vector. We will perform a sequential number comparison by sorting the assigned elements.

if consecutive number detection occurs at these stages, the function return false. Function return true if sudoku doesn't get stuck in controls
