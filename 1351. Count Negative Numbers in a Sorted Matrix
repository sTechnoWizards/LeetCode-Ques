Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

Example 1:
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

Example 2:
Input: grid = [[3,2],[1,0]]
Output: 0

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100


------------------------------------------Approach------------------------------------------------
# We have to given that Both Row And Column are in Sorted in descending Order
# j=grid[0].size()-1 ------> column pointer
# i=0 ----------> row pointer
# Start Iterating With Last element of Row and goes to the first Element of Row
# if Any Element Found -ve then then It ensure that all elements below the Current column are Negative ( b/c sorted in descending order )
# then we add Negative Count = Total Row - current Row ( we add All -ve element in the current column )
# then decrease the Column Pointer ( j--)
# if Element are Positive increase the Row pointer ( i++ )

--------------------------------------------Code--------------------------------------------------
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int i=0;
        int j=grid[0].size()-1;
        int count=0;
        while(i<grid.size()&&j>=0)
        {
            if(grid[i][j]<0)
            {
               count+=(grid.size()-i); 
               j--; 
            }
            else if(grid[i][j]>=0)
            {
                i++; 
            }
        }
       return count;
    }
};

----------------------------------------Complexities-------------------------------------------

Time complexity -----> O(m+n)
Space complexity ----> O(1)

